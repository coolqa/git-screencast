0:00:00.250,0:00:05.069
для того чтобы точно сказать Git`у, какие именно файлы являются текстовыми, а какие не являются

0:00:05.250,0:00:10.080
и задать ряд других полезных вспомогательных настроек используется файл ".gitattributes".

0:00:10.450,0:00:16.080
Его важнейшее преимущество и отличие от конфига состоит в том, что он позволяет явно сказать

0:00:16.390,0:00:18.779
к каким файлам применимы те или иные настройки.

0:00:19.300,0:00:24.210
То есть, запись в этом файле состоит в начале из шаблона к каким файлам применить настройки,

0:00:24.850,0:00:31.590
звездочка это все файлы, и затем, собственно, настройки — так называемые атрибуты. У каждого атрибута есть 4 варианта.

0:00:32.020,0:00:40.020
Во-первых, он может отсутствовать. Во вторых, можно его указать. В третьих, можно указать его со значением и, в четвертых, можно его снять.

0:00:40.480,0:00:45.180
Причем, обращаю ваше внимание: снятый атрибут это НЕ то же самое что не указанный.

0:00:46.080,0:00:52.760
Настройки, которые идут ниже могут перекрывать те, которые идут сверху. Например: здесь уточнение для всех файлов с расширением html.

0:00:53.040,0:00:57.979
А сейчас давайте поговорим об атрибутах. Первый атрибут, который нас здесь интересует это текст.

0:00:58.410,0:01:00.919
"auto" означает, что Git следует угадывать,

0:01:01.170,0:01:07.430
текстовый файл или бинарный, как я говорил в более раннем выпуске. Как правило, он ставится после шаблона звездочка

0:01:07.710,0:01:10.220
чтобы применялся ко всем файлам по умолчанию.

0:01:10.650,0:01:15.559
Далее, если атрибут "text" стоит без значения, то это означает что такие файлы всегда

0:01:15.750,0:01:19.369
текстовые. То есть, здесь все html-файлы текстовые.

0:01:20.310,0:01:25.160
И наконец, если атрибут в явном виде снят, как ниже для картинок, то файлы бинарные.

0:01:25.650,0:01:33.139
Для текстовых файлов включается нормализация, то есть преобразование переводов строк "crlf" на "lf" при записи в git.

0:01:33.750,0:01:38.569
А что будет при обратной операции то есть при чтении файла из Git в рабочую директорию?

0:01:39.210,0:01:46.220
Это задается атрибутом "eol". Такой атрибут автоматически подразумевает текст, так что эти две записи эквивалентны.

0:01:47.220,0:01:50.029
Значение "crlf" делает переводы строк виндовыми.

0:01:50.820,0:01:53.750
Значение "lf" забавное, потому что она вовсе не гарантирует

0:01:54.180,0:02:00.529
линуксовые переводы строк а просто говорит Git, что при чтении из него файла переводы строк в нем менять не надо.

0:02:01.260,0:02:07.279
И наконец, если этого атрибута нет как вот в первой строке, то это означает что Git будет ориентироваться на конфиг, а

0:02:07.440,0:02:13.940
точнее говоря на параметр "core.autocrlf", если он "true", то при чтении будет преобразование к виндовым переводам

0:02:14.190,0:02:17.929
если "input" то не будет. В случае, если этот параметр отсутствует,

0:02:18.470,0:02:22.729
то Git пытается посмотреть другой, достаточно мало известный параметр конфига: 

0:02:23.100,0:02:29.629
"core.eol", но этим параметром пользуются редко, потому что если и его нет, то Git уже смотрит на платформу.

0:02:30.000,0:02:35.809
Под windows преобразования строк будет выполнено, а под linux нет. На практике это очень удобно.

0:02:36.030,0:02:38.600
Из этой схемы работы есть одно забавное следствие:

0:02:39.180,0:02:44.150
если проект попадет к разработчику, в конфиге которого нет параметра "core.autocrlf",

0:02:44.489,0:02:50.359
например, к начинающему, который только поставил Git, то такая строка в атрибутах автоматически включает

0:02:50.730,0:02:58.009
нормализацию при записи в Git для текстовых файлов и денормализацию, то есть преобразование переводов строк к родным для данной платформы

0:02:58.290,0:03:03.599
при чтении из репозитория Git. Уже по этой причине, то есть чтобы не зависимо от конфига

0:03:03.939,0:03:08.009
гарантировать правильные переводы строк, файл: ".gitattributes" очень рекомендуется к использованию.

0:03:08.739,0:03:11.878
Пусть даже он будет состоять из одной единственной первой строки.

0:03:13.180,0:03:17.129
Дополнительно замечу: что вместо "-text" часто ставят атрибут "binary".

0:03:17.319,0:03:22.319
Он является псевдонимом для трех настроек:  "-text", "-merge" и "-diff".

0:03:22.750,0:03:28.049
Здесь "-text" говорит, что этот файл бинарный с точки зрения преобразования переводов строк, а

0:03:28.420,0:03:31.829
"-merge" и "-diff" отключают текстовые слияния и

0:03:32.200,0:03:36.839
сравнения для таких файлов. Мы их пока не рассматривали, но обязательно рассмотрим в будущих выпусках.

0:03:38.260,0:03:43.169
Для файлов с атрибутами, как и для файлов конфигурации, есть несколько возможных местоположений.

0:03:43.750,0:03:48.449
Например: посмотрим, где Git будет искать атрибуты для файла, который находится по такому пути.

0:03:49.299,0:03:54.599
Во-первых, атрибутом могут быть в файле "<project>/.git/info/attributes". Сразу напрашивается

0:03:54.970,0:04:02.879
ассоциация с локальным конфигом , который находится в ".git/config". Да, похоже, вот только файлы надо редактировать вручную — нет каких-то особых

0:04:03.159,0:04:05.339
команд для работы с файлами атрибутов Git.

0:04:05.470,0:04:13.019
Если атрибут там не найден, тогда он ищет файл с именем: ".gitattributes" в той же директории, в которой находится целевой файл

0:04:13.299,0:04:18.299
или если нет там, тогда уровнем выше или уровнем выше и так далее до корня проекта.

0:04:18.609,0:04:24.418
Далее он берет атрибут из файла путь которому задан в настройке конфигурации: "core.attributesFile".

0:04:25.120,0:04:32.909
Для того, чтобы иметь по аналогии с конфигом глобальный файл атрибутов домашней директории, мы можем прописать соответствующую настройку вот так.

0:04:34.180,0:04:39.060
Если этот параметр конфигурация не указан, то Git проверяет файл, который находится здесь.

0:04:39.580,0:04:43.770
где "$XDG_CONFIG_HOME" это переменная окружения, по аналогии с конфигом.

0:04:44.380,0:04:50.459
Ну, а если этой переменной окружения тоже нет, тогда, опять же, по аналогии с конфигом — вот здесь.

0:04:51.340,0:04:57.179
И наконец, последним Git смотрит системные атрибуты. Под Unix это "etc/gitattributes", под Windows

0:04:57.430,0:04:59.970
аналогично но в директории в которой установлен Git.

0:05:00.580,0:05:03.810
Если рассматривать реальные проекты, то безусловным лидером

0:05:04.210,0:05:10.400
является второй вариант, а если быть точным — то ".gitattributes" в корне проекта. Как мы увидим позже,

0:05:10.710,0:05:17.000
обычно такой файл является частью исходного кода и распространяется вместе с ним, так что в нем содержатся стандартные настройки

0:05:17.340,0:05:19.910
атрибутов проекта, которые получают все его участники.

0:05:20.340,0:05:27.139
Как правило, это: "* text=auto" и ряд других атрибутов, которые мы рассмотрим в последующих выпусках скринкаста.

0:05:27.720,0:05:33.649
Для того, чтобы получить полную справку об атрибутах, можно также набрать "git help attributes"

0:05:34.199,0:05:36.199
и вот они все.
