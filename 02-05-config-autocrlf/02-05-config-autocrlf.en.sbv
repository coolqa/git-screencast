0:00:00.035,0:00:03.285
git is capable of automatically transforming line-endigs

0:00:03.285,0:00:06.285
one way to set it up this functionality is

0:00:06.285,0:00:09.235
core.autocrlf setting. It has 3 possible values.

0:00:09.235,0:00:12.235
The first one is 'true'. It is oriented mainly

0:00:12.235,0:00:14.575
towards Windows users.

0:00:14.575,0:00:17.595
If you installed git under Windows and left

0:00:17.595,0:00:20.465
default settings during the process

0:00:20.465,0:00:23.365
you do not have to change anything: your system

0:00:23.365,0:00:26.405
is already configured to use true. With this setting when

0:00:26.405,0:00:29.355
you save a text file in git, it is run through what is

0:00:29.355,0:00:32.555
called normalization: double Windows line-endings CR LF

0:00:32.555,0:00:35.505
are substituted by single Unix LF.

0:00:35.505,0:00:38.115
The transformed file is than stored by git.

0:00:38.115,0:00:41.115
And vice-versa: when we fetch a file from a git database

0:00:41.115,0:00:43.825
LF endings are substituted by CR LF. As a result

0:00:43.825,0:00:46.885
we end up with a kind of 2-way conversion. Inside the git

0:00:46.885,0:00:50.045
files are with LF line-endings, but when we work with them

0:00:50.045,0:00:52.815
we see Windows style CR LF line-endigs.

0:00:52.815,0:00:55.485
Now, if we use git to share

0:00:55.485,0:00:58.485
to share our files, those who work on Unix

0:00:58.485,0:01:01.405
systems would get our files

0:01:01.405,0:01:03.855
with LF line-endigs. And would be very happy.

0:01:04.445,0:01:07.035
And those who work on Windows

0:01:07.035,0:01:08.385
would also get the files with LF file endings,

0:01:08.755,0:01:11.715
but they most likely would have the same settings.

0:01:11.715,0:01:14.575
Hence, when the receive our files from the git storage,

0:01:14.575,0:01:18.025
their git instance would convert LF to CR LF.

0:01:18.025,0:01:21.105
I.e. they would see the files with native Windows line endings.

0:01:21.105,0:01:23.945
At the end of the day, every one is happy. Another option is called

0:01:23.945,0:01:26.875
'input'. Contrary to the previous one
input. 

0:01:26.875,0:01:29.845
it does only one way conversion. I.e. when

0:01:29.845,0:01:33.185
we save a file in git, CR LF line endings are converted to LF

0:01:33.455,0:01:36.505
And when we receive a file from git, no conversion is done.

0:01:36.815,0:01:39.415
It is an excellent option for Unix systems because

0:01:39.415,0:01:42.445
on a Unix system a file with Windows line endings can appear

0:01:42.445,0:01:44.475
only accidentally. For instance someone could have

0:01:44.475,0:01:47.065
copied it directly from Windows bypassing git.

0:01:47.065,0:01:49.835
In this case the input setting would fix the issue.

0:01:50.295,0:01:53.025
I will note, that very often this option is chosen

0:01:53.025,0:01:55.445
by those who work on Windows in case

0:01:55.445,0:01:58.185
the main environment for their project remains Unix.

0:01:58.235,0:02:01.505
In this case, they setup their IDE to use LF

0:02:01.505,0:02:04.525
as line endings. Modern code editors allow to do it

0:02:04.525,0:02:07.115
quite easily. So, by choosing

0:02:07.115,0:02:09.835
this option, you tell git that the default line endings

0:02:09.835,0:02:12.905
in your project are LF, and CR LF

0:02:12.905,0:02:15.915
could appear in your files only by accident

0:02:15.915,0:02:18.965
and must be removed as quickly as possible. And, finally,

0:02:18.965,0:02:21.995
the last option is 'false' whicsh is set by default.

0:02:21.995,0:02:24.515
This options tells git to do nothing.

0:02:24.515,0:02:27.445
It is an excellent choice for when there is no problem with line endings.

0:02:27.445,0:02:30.145
For example, every team member works on a Unix system.

0:02:30.255,0:02:32.485
Or every one uses Windows.

0:02:32.485,0:02:35.095
And we know for sure that it will always be this way

0:02:35.095,0:02:37.615
and there will be no cross-platform development in the foreseeable future.

0:02:37.615,0:02:40.485
In this case every one has the same line endings and

0:02:40.485,0:02:43.545
we can leave everything as it is. Also this option is chosen

0:02:43.545,0:02:46.275
by orderly developers, who know for sure that their

0:02:46.275,0:02:49.175
code editors are setup correctly, that everything is ok with line endings,

0:02:49.175,0:02:51.525
and they do not want git to do any kind of automatic

0:02:51.525,0:02:54.585
conversion. At the same you should understand that

0:02:54.585,0:02:57.525
a file with CR LF endings would be saved to git

0:02:57.525,0:03:00.605
as is. So, if one of the developers 

0:03:00.605,0:03:03.115
has autocrlf set up, and another one does not,

0:03:03.115,0:03:05.945
or has a 'false' option set up by error, then

0:03:05.945,0:03:08.715
we would end up with a line ending mess in our git repository:

0:03:08.715,0:03:11.225
some files would have LF, others - CR LF.

0:03:11.925,0:03:14.915
In order to avoid it, there are alternative ways to

0:03:14.915,0:03:18.275
setup git through attributes, which we will have a look at later.

0:03:18.995,0:03:21.755
This is all for the core.autocrlf.

0:03:21.755,0:03:24.735
But in order to fully understand what happens behind the scenes

0:03:24.735,0:03:27.795
we must answer one more important question:

0:03:27.795,0:03:30.515
in which files does git convert the line endings?

0:03:30.705,0:03:33.455
Obviously not in each one.

0:03:33.455,0:03:36.515
In git we can store all kinds of files, both text and binary.

0:03:36.515,0:03:39.555
But whilst we can replace line endings

0:03:39.555,0:03:42.035
for cross-platform development in text files,

0:03:42.035,0:03:45.055
an attempt to change bytes in binary file, let's say an image,

0:03:45.055,0:03:48.415
would simply break it and corrupt the data.

0:03:48.705,0:03:51.795
But how does git know if a given file

0:03:52.125,0:03:53.815
is text or binary?

0:03:54.365,0:03:56.995
Does it have a magic mirror?

0:03:57.205,0:04:00.425
Of cource not! May be by the file extension?

0:04:00.425,0:04:03.365
It could be set up to do so, but by default it does not.

0:04:03.445,0:04:05.335
It looks at the content.

0:04:05.875,0:04:09.255
At what exactly? Could git's method fail leading

0:04:09.255,0:04:12.075
to a situation in which a text file

0:04:12.075,0:04:14.425
is mistaken for binary, and vice-versa.

0:04:14.945,0:04:17.645
It is quite an important question because a

0:04:17.645,0:04:20.435
failure to correctly identify the file type could lead

0:04:20.435,0:04:23.225
to errors in line endings conversion. Or, in the case of a binary file,

0:04:23.225,0:04:24.225
to it's corruption.

0:04:24.485,0:04:27.215
Unfortunately documentation on the subject is scarce.

0:04:27.215,0:04:30.005
But here is what the git's source code has to say about this.

0:04:30.145,0:04:33.155
The corresponding function is quite short.

0:04:33.155,0:04:36.325
Git analyzes the content of the file and if it sees CR
Git 

0:04:36.405,0:04:39.765
not followed by LF it assumes that the file is binary.

0:04:39.765,0:04:43.225
Indeed, Unix uses LF as line endigs,

0:04:43.475,0:04:46.225
Windows - CR LF.

0:04:46.225,0:04:48.935
And a CR not followed by LF would be strange for

0:04:48.935,0:04:52.045
a text file. Git decides that it must by binary.

0:04:52.045,0:04:54.815
Or, in the case the file has a null byte.

0:04:54.815,0:04:57.985
In general text files do not have it. So the file must be binary.

0:04:58.185,0:05:01.305
And, finally, git assumes that in text files there must

0:05:01.305,0:05:04.735
be 128 times more printable characters than there

0:05:04.935,0:05:06.815
are unprintable ones.

0:05:07.165,0:05:10.075
Therefore, if this proportion is violated, then the 

0:05:10.075,0:05:13.545
file must be binary. If not - it must be a text file.

0:05:13.895,0:05:15.745
The logic is quite simple.

0:05:16.155,0:05:19.085
In practice it is quite robust, and while it could fail once

0:05:19.085,0:05:21.945
in a while, there is an explicit way to let git know

0:05:21.945,0:05:24.585
which files are text through

0:05:24.585,0:05:27.605
attributes. We will talk about it in one of the future screencasts.

0:05:27.605,0:05:30.595
For the future, so that there is no confusion, I will note,

0:05:30.595,0:05:33.615
that this function is used to distinguish text files from binary

0:05:33.615,0:05:36.655
files only for the purpose of line ending conversion.

0:05:36.915,0:05:39.845
There is a similar function in git 

0:05:39.845,0:05:43.035
used for comparison, merging and other,

0:05:43.035,0:05:46.055
which simply checks if there is a single null byte

0:05:46.055,0:05:48.855
among the first 8 000 bytes.

0:05:48.855,0:05:51.395
If 'yes' - the file is binary, if 'not' - text.
